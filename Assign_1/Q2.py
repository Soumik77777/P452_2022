import library

matA = [[2,-3,0,0,0,0],[-1,4,-1,0,-1,0],[0,-1,4,0,0,-1],[0,0,0,2,-3,0],[0,-1,0,-1,4,-1],[0,0,-1,0,-1,4]]
vec = [-5/3,2/3,3,-4/3,-1/3,5/3]
solLU = library.LUSolve(matA, vec)


identity = [[0 for i in range(6)] for j in range(6)]
for i in range(6):
    identity[i][i] = 1

K= library.gauss_jacobi(matA,identity)
print("Inverse matrix using Gauss Jacobi:")
for i in range(len(K)):
    print(K[i])
print("Solution using Jacobi Method:")
print(library.multiply(K,vec))
print("")

K2= library.gauss_siedel(matA,identity)
print("Inverse matrix using Gauss Seidel Method:")
for i in range(len(K2)):
    print(K2[i])
print("Solution using Jacobi Method:")
print(library.multiply(K2,vec))
print("")


soln_cg= library.conjGrad(matA,vec,0.0001)
print("Solution using conjugate gradient method:")
print(soln_cg)
inverse_cg = library.invCG(matA, 0.0001, identity)
print("Inverse by Conjugate Gradient is:")
print(inverse_cg)




'''
Inverse matrix using Gauss Jacobi:
[0.9351533518679088, 0.87020748399082, 0.25983759708421617, 0.2078864137101943, 0.41565255534786283, 0.16893267414428265]
[0.29009468051557674, 0.5801237511550081, 0.1732155455411539, 0.1385763709679244, 0.2770986163599881, 0.11260721125731661]
[0.08660130562701629, 0.17317879962146132, 0.32036968022362516, 0.056299664647038436, 0.11257046533762405, 0.10824946836853873]
[0.20788641371019434, 0.41565255534786283, 0.1689326741442827, 0.9351533518679088, 0.8702074839908198, 0.25983759708421617]
[0.1385763709679244, 0.27709861635998817, 0.11260721125731661, 0.2900946805155768, 0.5801237511550081, 0.17321554554115387]
[0.05629966464703845, 0.11257046533762405, 0.10824946836853873, 0.08660130562701629, 0.1731787996214613, 0.32036968022362516]
Solution using Jacobi Method:
[-0.3331160856890619, 0.3334486552191383, 1.000052137012461, -0.6664552655326919, 0.00011851122821932014, 0.6667174005818346]

Inverse matrix using Gauss Seidel Method:
[0.9350701053556956, 0.8701341788248544, 0.25974536517139524, 0.20779718672842873, 0.4155883415703207, 0.16883606850288474]
[0.29004559793311374, 0.580088503381375, 0.17316245209826558, 0.13853036100203203, 0.27705802951921155, 0.1125562996462929]
[0.0865809173818259, 0.17316086551413407, 0.3203471407259206, 0.05627785633048922, 0.11255474341146073, 0.10822589554171616]
[0.2077964384768034, 0.4155879412525727, 0.16883534644319476, 0.935069009170193, 0.8701330826393517, 0.25974426898589253]
[0.13853002700102673, 0.27705785082727724, 0.11255597733671928, 0.29004510862303745, 0.5800880140712986, 0.1731619627881893]
[0.056277736095713154, 0.11255467908535283, 0.10822577951565997, 0.08658074123838166, 0.17316068937068985, 0.32034696458247636]
Solution using Jacobi Method:
[-0.33332354285194116, 0.33333770356189885, 1.0000015732091956, -0.6666586554269265, 3.5760191308131795e-06, 0.6666679539737482]

Solution using conjugate gradient method:
[-3.33347827e-01  3.33330136e-01  1.00000527e+00 -6.66684942e-01
 -9.24134974e-06  6.66667577e-01]
'''
